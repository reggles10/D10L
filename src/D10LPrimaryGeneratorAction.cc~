#include "10LPrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

10LPrimaryGeneratorAction::10LPrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(), fParticleGun(0), fWorld(0)
{

  G4int n_particle = 1;
  fParticleGun = new G4ParticleGun(n_particle);

  //default particle kinematic
  G4ParticleTable * pTable = G4ParticleTable::GetParticleTable();
  G4String pName;
  G4ParticleDefinition * particle = pTable->FindParticle(pName="gamma");
  fParticleGun->SetParticleDefinition(particle);
  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0.,0.,1.));
  fParticleGun->SetParticleEnergy(6.*MeV);
}

10LPrimaryGeneratorAction::~10LPrimaryGeneratorAction()
{
  delete fParticleGun;
}

void 10LPrimaryGeneratorAction::GeneratePrimaries(G4Event * anEvent)
{

  //this function is called at the beginning of each event

  //in order to avoid dependence of PrimaryGeneratorAction
  //on DetectorConstruction class we get world volume
  //from G4LogicalVolumeStore

  G4double worldSizeXY = 0;
  G4double worldSizeZ = 0;

  if(!fWorld)
    {
      G4LogicalVolume * worldLV = G4LogicalVolumeStore::GetInstance()->GetVolume("World");
      if( worldLV ) fWorld = dynamic_cast<G4Box*>(worldLV->GetSolid());
    }

  if(fWorld)
    {
      worldSizeXY = fWorld->GetXHalfLength()*2.;
      worldSizeZ = fWorld->GetZHalfLength()*2.;
    }
  else
    {
      G4ExceptionDescription msg;
      msg << "World volume of box shape not found.\n";
      msg << "Perhaps you have changed geometry.\n";
      msg << "The gun wil be placed at the centre.";
      G4Exception("10LPrimaryGeneratorAction::GeneratePrimaries()",
		  "MyCode0002", JustWarning, msg);
    }

  G4double size = 0.8;
  G4double x0 = size * worldSizeXY * (G4UniformRand()-0.5);
  G4double y0 = size * worldSizeXY * (G4UniformRand()-0.5);
  G4double z0 = -0.5 * worldSizeZ;

  fParticleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0));
  
  fParticleGun->GeneratePrimaryVertex(anEvent);
}
